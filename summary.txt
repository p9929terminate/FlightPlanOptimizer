Project Name: Plan Your Air Getaway

Project Description:
Plan Your Air Getaway is a project that incorporates Graph Theory and Document search to create a flight plan over the course of a single or multiple days
such that an individual can input some of the key features of their trip and recieve a plan such as their departure airport for the trip, the airport they
traveling to as their final destination, the start date of their traveling for the trip or the first day that they can take a flight to start their trip,
and the first day they can take a flight to return back to their original airport following their trip. Plan You Air Getaway also includes a key feature
to create the personalized flight itinerary based on the value of the individual taking the flights. This includes the ability to select between the importance
of the shortest possible path of departure delays, arrival delays, total elapsed time, air time, distance traveled, and an equal combination weighting of all
5 factors for an overall good experience. The project takes into account the preferences and creates a path then finds flights along that path if they exist and
returning them in a clear succint way to the individual.


Topic Breakdown:
Graph and Graph Algorithms - The primary way that we implemented Graph and Graph Algorithms to our project was with the use of the creation of an Adjacency
List with weighted directed edges that was used to run Dijkstras algorithm in our graph. The graph consisted of the vertices as various airports and the
directed edges being the existence of flights between those airports according to the final cleaned dataset that we created. We then implmented Dijkstras
Algorithm which was given the start and end vertices as indexes to find the shortest path between them with the given weights that we created based on the
selection of the user preferences of what they felt was important. This was done as part of the creation of the Adjacency list as well and we used a
further cleaned version of the cleaned dataset to see the directed edge connections.

Document Search - The primary way that we implemented Document Search was through both our use of regular expressions with recieved documents during the
Webscraper process of getting flights and actually building the functionality for the Webscraper to look into the html code of Kayak.com to find the
flights between specific places using the airport codes given by the user and the dates given by the user as well as well as dates generated by the program
following the date that the user inputed as the start of the itinerary for going and coming back from the location of their trip. The regular expressions
were used to do different things such as find specific times and find out if the times laid out in a chronological order so that the information that was
scraped could be cleaned and then showed to the user in a readable format that followed the order for the trip.


Work Breakdown:
- Clean Initial Dataset to be Grouped By Departure and Arrival Airports (Winnie)
- Create the GUI and Validation for inputed parameters (Pranav)
- Create the Flights Webscraper (Sheyan)
- Create the Adjacency List with Weights for the graph (Sheyan)
- Create the mean weighting of edges in Cleaned Dataset in Final Program (Winnie)
- Implement Dijkstras Algorithm (Pranav)
- Implement the Final Result Output Functionality (Winnie)
- Use regular expressions and other methods to get chronological based sorting of flights from web scraper (Sheyan, Pranav, and Winnie)
- Use different days to create a dictionary with a cleaned flight plan per day based on path and web scraper data (Sheyan, Pranav, and Winnie)